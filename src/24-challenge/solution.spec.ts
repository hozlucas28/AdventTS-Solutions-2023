import type { Equal, Expect } from 'type-testing'
import type { Move } from './solution'

type Maze = [
	['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
	['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎅', '🎄', '🎄', '🎄'],
	['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '  ', '  ', '  ', '🎄'],
	['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
	['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
	['  ', '  ', '🎄', '🎄', '  ', '  ', '  ', '🎄', '🎄', '🎄'],
	['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
	['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
	['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
	['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
]

describe('Challenge 24: create a type definition to play a maze with Santa as main character', () => {
	it('Test 01', () => {
		type Actual = Move<Maze, 'up'>

		type Expected = [
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎅', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '  ', '  ', '  ', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
			['  ', '  ', '🎄', '🎄', '  ', '  ', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
		]

		type Test = Expect<Equal<Actual, Expected>>
	})

	it('Test 02', () => {
		type Actual = Move<Maze, 'down'>

		type Expected = [
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '🎅', '  ', '  ', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
			['  ', '  ', '🎄', '🎄', '  ', '  ', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
		]

		type Test = Expect<Equal<Actual, Expected>>
	})

	it('Test 03', () => {
		type Move02 = Move<Maze, 'down'>

		type Actual = Move<Move02, 'down'>

		type Expected = [
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '  ', '  ', '  ', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '🎅', '🎄', '  ', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
			['  ', '  ', '🎄', '🎄', '  ', '  ', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
		]

		type Test = Expect<Equal<Actual, Expected>>
	})

	it('Test 04', () => {
		type Move02 = Move<Maze, 'down'>
		type Move03 = Move<Move02, 'down'>

		type Actual = Move<Move03, 'left'>

		type Expected = [
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '  ', '  ', '  ', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '🎅', '🎄', '  ', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
			['  ', '  ', '🎄', '🎄', '  ', '  ', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
		]

		type Test = Expect<Equal<Actual, Expected>>
	})

	it('Test 05', () => {
		type Move02 = Move<Maze, 'down'>
		type Move03 = Move<Move02, 'down'>

		type Actual = Move<Move03, 'up'>

		type Expected = [
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '🎅', '  ', '  ', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
			['  ', '  ', '🎄', '🎄', '  ', '  ', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
		]

		type Test = Expect<Equal<Actual, Expected>>
	})

	it('Test 06', () => {
		type Move02 = Move<Maze, 'down'>
		type Move03 = Move<Move02, 'down'>

		type Actual = Move<Move03, 'right'>

		type Expected = [
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '  ', '  ', '  ', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '🎅', '🎄', '  ', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
			['  ', '  ', '🎄', '🎄', '  ', '  ', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
		]

		type Test = Expect<Equal<Actual, Expected>>
	})

	it('Test 07', () => {
		type Move02 = Move<Maze, 'down'>
		type Move03 = Move<Move02, 'down'>
		type Move07 = Move<Move03, 'down'>
		type Move08 = Move<Move07, 'down'>
		type Move09 = Move<Move08, 'left'>

		type Actual = Move<Move09, 'left'>

		type Expected = [
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '  ', '  ', '  ', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
			['  ', '  ', '🎄', '🎄', '🎅', '  ', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
		]

		type Test = Expect<Equal<Actual, Expected>>
	})

	it('Test 08', () => {
		type Move02 = Move<Maze, 'down'>
		type Move03 = Move<Move02, 'down'>
		type Move07 = Move<Move03, 'down'>
		type Move08 = Move<Move07, 'down'>
		type Move09 = Move<Move08, 'left'>
		type Move10 = Move<Move09, 'left'>

		type Actual = Move<Move10, 'left'>

		type Expected = [
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '  ', '  ', '  ', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
			['  ', '  ', '🎄', '🎄', '🎅', '  ', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
		]

		type Test = Expect<Equal<Actual, Expected>>
	})

	it('Test 09', () => {
		type Move02 = Move<Maze, 'down'>
		type Move03 = Move<Move02, 'down'>
		type Move07 = Move<Move03, 'down'>
		type Move08 = Move<Move07, 'down'>
		type Move09 = Move<Move08, 'left'>
		type Move10 = Move<Move09, 'left'>
		type Move12 = Move<Move10, 'up'>
		type Move13 = Move<Move12, 'left'>
		type Move15 = Move<Move13, 'left'>
		type Move16 = Move<Move15, 'left'>
		type Move17 = Move<Move16, 'down'>

		type Actual = Move<Move17, 'left'>

		type Expected = [
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '  ', '  ', '  ', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '  ', '🎄'],
			['🎅', '  ', '🎄', '🎄', '  ', '  ', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '🎄', '🎄', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '  ', '  ', '  ', '  ', '🎄', '  ', '🎄', '🎄', '🎄'],
			['🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄', '🎄'],
		]

		type Test = Expect<Equal<Actual, Expected>>
	})

	it('Test 10', () => {
		type Move02 = Move<Maze, 'down'>
		type Move03 = Move<Move02, 'down'>
		type Move07 = Move<Move03, 'down'>
		type Move08 = Move<Move07, 'down'>
		type Move09 = Move<Move08, 'left'>
		type Move10 = Move<Move09, 'left'>
		type Move12 = Move<Move10, 'up'>
		type Move13 = Move<Move12, 'left'>
		type Move15 = Move<Move13, 'left'>
		type Move16 = Move<Move15, 'left'>
		type Move17 = Move<Move16, 'down'>
		type Move18 = Move<Move17, 'left'>

		type Actual = Move<Move18, 'left'>

		type Expected = [
			['🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪'],
			['🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪'],
			['🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪'],
			['🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪'],
			['🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪'],
			['🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪'],
			['🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪'],
			['🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪'],
			['🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪'],
			['🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪', '🍪'],
		]

		type Test = Expect<Equal<Actual, Expected>>
	})
})
